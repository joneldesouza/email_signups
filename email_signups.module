<?php
/**
 * @file
 * The functions for the Email Signups module.
 */

/**
 * Implements hook_permission().
 */
function email_signups_permission() {
  return array(
    'access email_signups page' => array(
      'title' => t('Access email signups page'),
      'description' => t('Allow users to access email signups page'),
    ),
    'access email_signups form' => array(
      'title' => t('Access email signups form'),
      'description' => t('Allow users to access email signups form'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function email_signups_menu() {
  $items['admin/content/email_signups'] = array(
    'title' => 'Mailing',
    'page callback' => 'page_email_signups',
    'access arguments' => array('access email_signups page'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/email_signups/export'] = array(
    'title' => 'Export mailing',
    'page callback' => 'page_email_signups_export',
    'access arguments' => array('access email_signups page'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter(&$data, $router_item, $root_path).
 */
function email_signups_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/content/email_signups') {
    // Add an action linking to node/add to all pages.
    $data['actions']['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Export mailing'),
        'href' => 'admin/content/email_signups/export',
        'localized_options' => array(
          'attributes' => array(
            'title' => t('Export mailing'),
          ),
        ),
      ),
    );
  }
}

/**
 * Constructs a page.
 * The simple page callback, mapped to the path 'admin/content/email_signups'.
 */
function page_email_signups() {
  $header = array(
    array('data' => t('Email'), 'field' => 'email', 'sort' => 'asc'),
    array('data' => t('Created'), 'field' => 'created'),
  );
  $sql = db_select('email_signups')
    ->fields('email_signups', array('email', 'created'))
    // ->orderBy('email', 'DESC')
    ->extend('TableSort')
    ->orderByHeader($header);

  $result = $sql->execute();

  foreach ($result as $row) {
    $created = gmdate("d/m/Y H:i:s", $row->created);
    $rows[] = array($row->email, $created);
  }

  $per_page = 20;
  // Initialize the pager
  $current_page = pager_default_initialize(count($rows), $per_page);
  // Split your list into page sized chunks
  $chunks = array_chunk($rows, $per_page, TRUE);
  // Show the appropriate items from the list
  $output = theme('table', array('header' => $header, 'rows' => $chunks[$current_page], 'sticky' => TRUE, 'empty' => 'No registered mail.'));
  // Show the pager
  $output .= theme('pager', array('quantity', count($rows)));
  return $output;
}

/**
 * Constructs a page.
 * The simple page callback, mapped to the path 'admin/content/email_signups/export'.
 */
function page_email_signups_export() {
  $xls_output = '';
  $sql = db_select('email_signups')
    ->fields('email_signups', array('email', 'created'))
    ->orderBy('created', 'DESC');

  $result = $sql->execute();

  foreach ($result as $row) {
    $email = $row->email;
    $created = gmdate("d/m/Y H:i:s", $row->created);
    $row_xls_output .= "" . $email . "" . "\t" . "" . $created . "" . "\r";
  } 

  $xls_output .= $row_xls_output;
  header("Content-Type: application/xls");
  header("Content-Disposition: attachment; filename=export.xls");
  print $xls_output;
  exit; 
}

/**
 * Implements hook_block_info().
 */
function email_signups_block_info() {
  $blocks = array();
  $blocks['email_signups_form'] = array(
    'info' => t('Email signups form'),
  ); 
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function email_signups_block_view($delta='') {
  if (user_access('access email_signups form')) {
    $block = array(); 
    switch ($delta) {
      case 'email_signups_form':
        $block['subject'] = t('Email signups');
        $block['content'] = drupal_get_form('email_signups_form');
      break;
    }
    return $block;
  }
}

/**
 * Implements hook_form($form, &$form_state).
 */
function email_signups_form($form, &$form_state) {
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => '',
    '#attributes' => array(
      'placeholder' => t('Insert your Email'),
    ),
    '#size' => 25,
    '#maxlength' => 254,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'email_signups_ajax_submit',
      'wrapper' => 'email-signups-form',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}

/**
 * Submit Ajax function for email_signups_form($form, &$form_state, &$vars).
 */
function email_signups_ajax_submit($form, &$form_state, &$vars) {
  // validate the form
  drupal_validate_form('email_signups_form', $form, $form_state);
  // if there are errors, return the form to display the error messages
  if (form_get_errors()) {
    $form_state['rebuild'] = TRUE;
    return $form;
  }
  // process the form
  $get_message = drupal_get_messages('status');
  $message = "<div class=\"messages status\">" . $get_message['status'][0] . "</div>";
  $output = array(
    '#markup' => $message
  );
  // return the confirmation message
  return $output;
}

/**
 * Validation function for email_signups_form($form, &$form_state).
 */
function email_signups_form_validate($form, &$form_state) {
  $email = $form_state['values']['email'];
  if (valid_email_address($email) == 0) {
    form_set_error('email', t('Not a valid email address'));
  }
  $sql = db_select('email_signups')
    ->fields('email_signups', array('email'))
    ->condition('email', $email)
    ->countQuery()
    ->execute()
    ->fetchField();
  if ($sql >= 1) {
    form_set_error('email', t('This email address is alredy subscribed.'));
  }
}

/**
 * Submit function for email_signups_form($form, &$form_state) in database.
 */
function email_signups_form_submit($form, &$form_state) {
  $sql = db_insert('email_signups')
    ->fields(array(
      'email' => $form['email']['#value'],
      'created' => REQUEST_TIME
    ))
    ->execute();

  $email = $form_state['values']['email'];
  drupal_set_message(t('Thank you for subscribing, @email!', array('@email' => $email)), 'status');
}
